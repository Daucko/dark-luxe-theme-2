
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  googleId: 'googleId',
  role: 'role',
  avatar: 'avatar',
  bio: 'bio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  subject: 'subject',
  instructions: 'instructions',
  totalPoints: 'totalPoints',
  dueDate: 'dueDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teacherId: 'teacherId'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  status: 'status',
  submittedAt: 'submittedAt',
  content: 'content',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  studentId: 'studentId',
  assignmentId: 'assignmentId'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  points: 'points',
  feedback: 'feedback',
  gradedAt: 'gradedAt',
  updatedAt: 'updatedAt',
  submissionId: 'submissionId',
  studentId: 'studentId',
  gradedById: 'gradedById'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  fileType: 'fileType',
  uploadedAt: 'uploadedAt',
  assignmentId: 'assignmentId',
  submissionId: 'submissionId'
};

exports.Prisma.VideoScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  videoUrl: 'videoUrl',
  thumbnailUrl: 'thumbnailUrl',
  duration: 'duration',
  uploadedAt: 'uploadedAt',
  uploaderId: 'uploaderId',
  assignmentId: 'assignmentId'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  enrolledAt: 'enrolledAt',
  studentId: 'studentId',
  courseId: 'courseId'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  subject: 'subject',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  ADMIN: 'ADMIN'
};

exports.AssignmentStatus = exports.$Enums.AssignmentStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.SubmissionStatus = exports.$Enums.SubmissionStatus = {
  NOT_SUBMITTED: 'NOT_SUBMITTED',
  SUBMITTED: 'SUBMITTED',
  GRADED: 'GRADED',
  LATE: 'LATE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Assignment: 'Assignment',
  Submission: 'Submission',
  Grade: 'Grade',
  Attachment: 'Attachment',
  Video: 'Video',
  Enrollment: 'Enrollment',
  Course: 'Course',
  Notification: 'Notification'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\USER\\Desktop\\personal_project\\eduAssign\\dark-luxe-theme-2\\app\\generated\\prisma-client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\USER\\Desktop\\personal_project\\eduAssign\\dark-luxe-theme-2\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../app/generated/prisma-client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum Role {\n  STUDENT\n  TEACHER\n  ADMIN\n}\n\nenum AssignmentStatus {\n  DRAFT\n  PUBLISHED\n  ARCHIVED\n}\n\nenum SubmissionStatus {\n  NOT_SUBMITTED\n  SUBMITTED\n  GRADED\n  LATE\n}\n\nmodel User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  name      String?\n  password  String? // Hashed password for email/password auth\n  googleId  String?  @unique // For Google OAuth\n  role      Role     @default(STUDENT)\n  avatar    String?\n  bio       String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  assignmentsCreated Assignment[]   @relation(\"TeacherAssignments\")\n  submissions        Submission[]\n  grades             Grade[]        @relation(\"StudentGrades\")\n  gradesGiven        Grade[]        @relation(\"TeacherGrades\")\n  enrollments        Enrollment[]\n  notifications      Notification[]\n  videos             Video[]\n\n  @@index([email])\n  @@index([role])\n}\n\nmodel Assignment {\n  id           String           @id @default(cuid())\n  title        String\n  description  String\n  subject      String\n  instructions String?          @db.Text\n  totalPoints  Int\n  dueDate      DateTime\n  status       AssignmentStatus @default(PUBLISHED)\n  createdAt    DateTime         @default(now())\n  updatedAt    DateTime         @updatedAt\n\n  // Relations\n  teacherId   String\n  teacher     User         @relation(\"TeacherAssignments\", fields: [teacherId], references: [id], onDelete: Cascade)\n  submissions Submission[]\n  attachments Attachment[]\n  videos      Video[]\n\n  @@index([teacherId])\n  @@index([status])\n  @@index([dueDate])\n  @@index([subject])\n}\n\nmodel Submission {\n  id          String           @id @default(cuid())\n  status      SubmissionStatus @default(NOT_SUBMITTED)\n  submittedAt DateTime?\n  content     String?          @db.Text\n  notes       String?          @db.Text\n  createdAt   DateTime         @default(now())\n  updatedAt   DateTime         @updatedAt\n\n  // Relations\n  studentId    String\n  student      User         @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  assignmentId String\n  assignment   Assignment   @relation(fields: [assignmentId], references: [id], onDelete: Cascade)\n  attachments  Attachment[]\n  grade        Grade?\n\n  @@unique([studentId, assignmentId])\n  @@index([studentId])\n  @@index([assignmentId])\n  @@index([status])\n}\n\nmodel Grade {\n  id        String   @id @default(cuid())\n  points    Float\n  feedback  String?  @db.Text\n  gradedAt  DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  submissionId String     @unique\n  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)\n  studentId    String\n  student      User       @relation(\"StudentGrades\", fields: [studentId], references: [id], onDelete: Cascade)\n  gradedById   String\n  gradedBy     User       @relation(\"TeacherGrades\", fields: [gradedById], references: [id])\n\n  @@index([studentId])\n  @@index([gradedById])\n}\n\nmodel Attachment {\n  id         String   @id @default(cuid())\n  fileName   String\n  fileUrl    String\n  fileSize   Int\n  fileType   String\n  uploadedAt DateTime @default(now())\n\n  // Relations - can belong to either assignment or submission\n  assignmentId String?\n  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)\n  submissionId String?\n  submission   Submission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)\n\n  @@index([assignmentId])\n  @@index([submissionId])\n}\n\nmodel Video {\n  id           String   @id @default(cuid())\n  title        String\n  description  String?\n  videoUrl     String\n  thumbnailUrl String?\n  duration     Int? // Duration in seconds\n  uploadedAt   DateTime @default(now())\n\n  // Relations\n  uploaderId   String\n  uploader     User        @relation(fields: [uploaderId], references: [id], onDelete: Cascade)\n  assignmentId String?\n  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: SetNull)\n\n  @@index([uploaderId])\n  @@index([assignmentId])\n}\n\nmodel Enrollment {\n  id         String   @id @default(cuid())\n  enrolledAt DateTime @default(now())\n\n  // Relations\n  studentId String\n  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  courseId  String\n  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)\n\n  @@unique([studentId, courseId])\n  @@index([studentId])\n  @@index([courseId])\n}\n\nmodel Course {\n  id          String   @id @default(cuid())\n  name        String\n  code        String   @unique\n  description String?  @db.Text\n  subject     String\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relations\n  enrollments Enrollment[]\n\n  @@index([subject])\n}\n\nmodel Notification {\n  id        String   @id @default(cuid())\n  title     String\n  message   String   @db.Text\n  type      String // e.g., \"ASSIGNMENT_CREATED\", \"GRADE_POSTED\", \"DUE_DATE_REMINDER\"\n  isRead    Boolean  @default(false)\n  createdAt DateTime @default(now())\n\n  // Relations\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([isRead])\n  @@index([createdAt])\n}\n",
  "inlineSchemaHash": "69469d6bd2854edae353fcab54655ae519bc93dc7f65676c8be3efa47ad2c103",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"googleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"assignmentsCreated\",\"kind\":\"object\",\"type\":\"Assignment\",\"relationName\":\"TeacherAssignments\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"SubmissionToUser\"},{\"name\":\"grades\",\"kind\":\"object\",\"type\":\"Grade\",\"relationName\":\"StudentGrades\"},{\"name\":\"gradesGiven\",\"kind\":\"object\",\"type\":\"Grade\",\"relationName\":\"TeacherGrades\"},{\"name\":\"enrollments\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"},{\"name\":\"videos\",\"kind\":\"object\",\"type\":\"Video\",\"relationName\":\"UserToVideo\"}],\"dbName\":null},\"Assignment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instructions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalPoints\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AssignmentStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"teacherId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TeacherAssignments\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"AssignmentToSubmission\"},{\"name\":\"attachments\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AssignmentToAttachment\"},{\"name\":\"videos\",\"kind\":\"object\",\"type\":\"Video\",\"relationName\":\"AssignmentToVideo\"}],\"dbName\":null},\"Submission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SubmissionStatus\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SubmissionToUser\"},{\"name\":\"assignmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignment\",\"kind\":\"object\",\"type\":\"Assignment\",\"relationName\":\"AssignmentToSubmission\"},{\"name\":\"attachments\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AttachmentToSubmission\"},{\"name\":\"grade\",\"kind\":\"object\",\"type\":\"Grade\",\"relationName\":\"GradeToSubmission\"}],\"dbName\":null},\"Grade\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"points\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"feedback\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gradedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"submissionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submission\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"GradeToSubmission\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StudentGrades\"},{\"name\":\"gradedById\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gradedBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TeacherGrades\"}],\"dbName\":null},\"Attachment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"fileType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"assignmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignment\",\"kind\":\"object\",\"type\":\"Assignment\",\"relationName\":\"AssignmentToAttachment\"},{\"name\":\"submissionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submission\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"AttachmentToSubmission\"}],\"dbName\":null},\"Video\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"videoUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thumbnailUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"uploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"uploaderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploader\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToVideo\"},{\"name\":\"assignmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignment\",\"kind\":\"object\",\"type\":\"Assignment\",\"relationName\":\"AssignmentToVideo\"}],\"dbName\":null},\"Enrollment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enrolledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToEnrollment\"}],\"dbName\":null},\"Course\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"enrollments\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"CourseToEnrollment\"}],\"dbName\":null},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

